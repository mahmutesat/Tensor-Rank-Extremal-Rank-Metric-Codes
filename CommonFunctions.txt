#############################################################################
#Given a Vector, It Creates a Matrix of the Given Sizes
#############################################################################
CreateMatrix := function(vector, row, column)
	local Matrix, j;
	Matrix := List( [1..row], j -> vector{ [1+(column)*(j-1)..column*j] });
	return Matrix;
end;
#############################################################################
#############################################################################
#############################################################################

#############################################################################
#Given a Code, Returns the Minimum Distance of the Code
#############################################################################
MinimumDistance := function(C)
	local ranks, c;
	
	ranks := [];
	for c in C do
		Add(ranks, RankMat(c));
	od;
	Sort(ranks);
	return ranks[2];
end;
#############################################################################
#############################################################################
#############################################################################


#############################################################################
#Creates the Set of All Rank-1 Matrices for Small Fields
#############################################################################
CreateRank1Matrices := function(field, n1, n2)
	local V1,V2, m, m2, a, pos, result;
	V1 := FullMatrixSpace(field, 1, n1);
	V2 := FullMatrixSpace(field, 1, n2);
	result := [];
	
	#I do not want large fields
	if not Length(Set(field)) < 5 then
		Error("Incompatible Lists","\n");
	fi;

	for m in Set(V1) do
		if not m = Zero(V1) then
			for m2 in Set(V2) do
				if not m2 = Zero(V2) then
					a:= TransposedMat(m)*m2;
					Add(result,a);
				fi;
			od;
		fi;
	od;

	return result;
end;
#############################################################################
#############################################################################
#############################################################################